name: Deploy Spring Boot to EC2

on:
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up JDK for Gradle build
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Cache Gradle to speed up builds
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            server/.gradle/caches
            server/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('server/**/*.gradle*', 'server/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 4. Build Spring Boot JAR
      - name: Build JAR with Gradle
        working-directory: server
        run: ./gradlew clean build -x test

      # 5. Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 6. Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 7. Build and push Docker image
      - name: Build and push Docker image
        run: |
          cd server
          docker buildx create --use
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ steps.login-ecr.outputs.registry }}/nested:latest \
            . \
            --push

      # 8. Deploy to EC2
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker pull ${{ steps.login-ecr.outputs.registry }}/nested:latest
            docker stop nested-server || true
            docker rm nested-server || true
            docker run -d --env-file ~/env.list -p 8080:8080 --name nested-server ${{ steps.login-ecr.outputs.registry }}/nested:latest
