openapi: "3.0.2"
info:
  title: Nested REST APIs
  version: "1.0"
servers:
  - url: https://api.server.test/api/v1
paths:
  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MinifiedUser'
    put:
      summary: Update an existing user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/MinifiedUser'
  /children:
    get:
      summary: Get all children
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Child'
    post:
      summary: Create a new child
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Child'
      responses:
        '201':
          description: Child created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Child'
    put:
      summary: Update an existing child
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Child'
      responses:
        '200':
          description: Child updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Child'
  /goals:
    get:
      summary: Get all goals
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Goal'
    post:
      summary: Create a new goal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Goal'
      responses:
        '201':
          description: Goal created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Goal'
    put:
      summary: Update an existing goal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Goal'
      responses:
        '200':
          description: Goal updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Goal'
        '409':
          description: Cannot update goal when an order exists for this goal
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Cannot update goal when an order exists for this goal
  /goals/{goalId}/holdings:
    get:
      summary: Get holdings for a goal
      parameters:
        - name: goalId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Holding'
  /goals/{goalId}/orders:
    get:
      summary: Get orders for a goal
      parameters:
        - name: goalId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
    post:
      summary: Create orders for a goal
      parameters:
        - name: goalId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Orders created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
  /bucket/{id}:
    get:
      summary: Get basket details by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Basket details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Basket'
        '404':
          description: Basket not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Basket not found
components:
  schemas:
    Child:
      type: object
      properties:
        id:
          type: string
          format: number
        first_name:
          type: string
        last_name:
          type: string
        dob:
          type: string
          format: date
        gender:
          type: string
          enum:
            - male
            - female
            - other
        is_minor_investor:
          type: boolean
        user:
          type: object
          $ref: '#/components/schemas/MinifiedUser'
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
    MinifiedUser:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string

    Fund:
      type: object
      properties:
        id:
          type: string
          format: number
        code: # this fund_id from tarrakki API
          type: string
        name:
          type: string
        display_name:
          type: string
        description:
          type: string
        min_amount:
          type: number
          format: float
        nav:
          type: number
          format: float
        is_active:
          type: boolean

    Order:
      type: object
      properties:
        id:
          type: string
          format: number
        order_date:
          type: string
          format: date
        amount:
          type: number
          format: float
        type:
          type: string
          enum:
            - buy
            - sell
            - sip
        status:
          type: string
          enum:
            - pending
            - completed
            - failed
            - cancelled
            - active
        fund:
          type: object
          $ref: '#/components/schemas/Fund'
        monthly_sip:
          type: number
          format: float
        user:
          type: object
          $ref: '#/components/schemas/MinifiedUser'
        child:
          type: object
          $ref: '#/components/schemas/Child'

    Basket:
      type: object
      properties:
        id:
          type: string
          format: number
        title:
          type: string
        funds:
          type: array
          items:
            type: object
            properties:
              fund:
                type: object
                $ref: '#/components/schemas/Fund'
              allocation_percentage:
                type: number
                format: float

    Holding:
      type: object
      properties:
        id:
          type: string
          format: number
        units:
          type: number
          format: float
        invested_amount:
          type: number
          format: float
        current_value:
          type: number
          format: float
        order:
          type: object
          $ref: '#/components/schemas/Order'
        order_allocation_percentage:
          type: number
          format: float
        goal:
          type: object
          $ref: '#/components/schemas/Goal'
        fund:
          type: object
          $ref: '#/components/schemas/Fund'
        user:
          type: object
          $ref: '#/components/schemas/MinifiedUser'
        child:
          type: object
          $ref: '#/components/schemas/Child'

    Goal:
      type: object
      properties:
        id:
          type: string
          format: number
        title:
          type: string
        target_amount:
          type: number
          format: float
        current_amount:
          type: number
          format: float
        target_date:
          type: string
          format: date
        basket:
          type: object
          $ref: '#/components/schemas/Basket'
        user:
          type: object
          $ref: '#/components/schemas/MinifiedUser'
        child:
          type: object
          $ref: '#/components/schemas/Child'
        status:
          type: string
          description: Goal status
          enum:
            - draft
            - active
            - completed
            - cancelled
